{"version":3,"sources":["configs/themeConfig.js","assets/images/logo/logo.jpg","redux/reducers/auth/index.js","redux/reducers/navbar/index.js","redux/reducers/layout/index.js","redux/reducers/rootReducer.js","redux/storeConfig/store.js","utility/context/ThemeColors.js","@core/components/spinner/Fallback-spinner.js","@core/components/ripple-button/index.js","serviceWorker.js","index.js"],"names":["themeConfig","app","appName","appLogoImage","require","default","layout","isRTL","skin","routerTransition","type","contentWidth","menu","isHidden","isCollapsed","navbar","backgroundColor","footer","customizer","scrollTop","initialState","userData","authReducer","state","action","data","config","storageTokenKeyName","storageRefreshTokenKeyName","obj","suggestions","bookmarks","query","navbarReducer","val","objectToUpdate","find","item","id","isBookmarked","bookmarkIndex","findIndex","x","push","splice","menuCollapsed","window","localStorage","getItem","JSON","parse","initialMenuCollapsed","menuHidden","layoutReducer","value","setItem","rootReducer","combineReducers","auth","middleware","thunk","createDebounce","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","ThemeColors","createContext","ThemeContext","children","useState","colors","setColors","useEffect","getHex","color","getComputedStyle","document","body","getPropertyValue","trim","primary","light","concat","main","secondary","success","danger","warning","info","dark","Provider","SpinnerComponent","className","style","height","width","src","logo","alt","Button","Ripple","onClick","rest","mounted","setMounted","isRippling","setIsRippling","y","coords","setCoords","setTimeout","classnames","e","rect","target","getBoundingClientRect","clientX","left","clientY","top","Boolean","location","hostname","match","LazyApp","lazy","ReactDOM","render","fallback","newestOnTop","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8fb6e7d7.chunk.js","sourcesContent":["// You can customize the template with the help of this file\n\n//Template config options\nconst themeConfig = {\n  app: {\n    appName: 'Bidoya',\n    appLogoImage: require('@src/assets/images/logo/logo.jpg').default\n  },\n  layout: {\n    isRTL: false,\n    skin: 'dark', // light, dark, bordered, semi-dark\n    routerTransition: 'fadeIn', // fadeIn, fadeInLeft, zoomIn, none or check this for more transition https://animate.style/\n    type: 'vertical', // vertical, horizontal\n    contentWidth: 'full', // full, boxed\n    menu: {\n      isHidden: true,\n      isCollapsed: false\n    },\n    navbar: {\n      // ? For horizontal menu, navbar type will work for navMenu type\n      // type: 'floating', // static , sticky , floating, hidden\n      type: 'hidden', // static , sticky , floating, hidden\n\n      backgroundColor: 'primary' // BS color options [primary, success, etc]\n    },\n    footer: {\n      type: 'static' // static, sticky, hidden\n    },\n    customizer: false,\n    scrollTop: true // Enable scroll to top button\n  }\n}\n\nexport default themeConfig\n","export default __webpack_public_path__ + \"static/media/logo.e653e0c0.jpg\";","// **  Initial State\nconst initialState = {\n  userData: {}\n}\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'LOGIN':\n      return {\n        ...state,\n        userData: action.data,\n        [action.config.storageTokenKeyName]: action[action.config.storageTokenKeyName],\n        [action.config.storageRefreshTokenKeyName]: action[action.config.storageRefreshTokenKeyName]\n      }\n    case 'LOGOUT':\n      const obj = { ...action }\n      delete obj.type\n      return { ...state, userData: {}, ...obj }\n    default:\n      return state\n  }\n}\n\nexport default authReducer\n","// ** Initial State\nconst initialState = {\n  suggestions: [],\n  bookmarks: [],\n  query: ''\n}\n\nconst navbarReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'HANDLE_SEARCH_QUERY':\n      return { ...state, query: action.val }\n    case 'GET_BOOKMARKS':\n      return { ...state, suggestions: action.data, bookmarks: action.bookmarks }\n    case 'UPDATE_BOOKMARKED':\n      let objectToUpdate\n\n      // ** find & update object\n      state.suggestions.find(item => {\n        if (item.id === action.id) {\n          item.isBookmarked = !item.isBookmarked\n          objectToUpdate = item\n        }\n      })\n\n      // ** Get index to add or remove bookmark from array\n      const bookmarkIndex = state.bookmarks.findIndex(x => x.id === action.id)\n\n      if (bookmarkIndex === -1) {\n        state.bookmarks.push(objectToUpdate)\n      } else {\n        state.bookmarks.splice(bookmarkIndex, 1)\n      }\n\n      return { ...state }\n    default:\n      return state\n  }\n}\n\nexport default navbarReducer\n","// ** ThemeConfig Import\nimport themeConfig from '@configs/themeConfig'\n\n// ** Returns Initial Menu Collapsed State\nconst initialMenuCollapsed = () => {\n  const item = window.localStorage.getItem('menuCollapsed')\n  //** Parse stored json or if none return initialValue\n  return item ? JSON.parse(item) : themeConfig.layout.menu.isCollapsed\n}\n\n// ** Initial State\nconst initialState = {\n  isRTL: themeConfig.layout.isRTL,\n  menuCollapsed: initialMenuCollapsed(),\n  menuHidden: themeConfig.layout.menu.isHidden,\n  contentWidth: themeConfig.layout.contentWidth\n}\n\nconst layoutReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'HANDLE_CONTENT_WIDTH':\n      return { ...state, contentWidth: action.value }\n    case 'HANDLE_MENU_COLLAPSED':\n      window.localStorage.setItem('menuCollapsed', action.value)\n      return { ...state, menuCollapsed: action.value }\n    case 'HANDLE_MENU_HIDDEN':\n      return { ...state, menuHidden: action.value }\n    case 'HANDLE_RTL':\n      return { ...state, isRTL: action.value }\n    default:\n      return state\n  }\n}\n\nexport default layoutReducer\n","// ** Redux Imports\nimport { combineReducers } from 'redux'\n\n// ** Reducers Imports\nimport auth from './auth'\nimport navbar from './navbar'\nimport layout from './layout'\n\nconst rootReducer = combineReducers({\n  auth,\n  navbar,\n  layout\n})\n\nexport default rootReducer\n","// ** Redux, Thunk & Root Reducer Imports\nimport thunk from 'redux-thunk'\nimport createDebounce from 'redux-debounced'\nimport rootReducer from '../reducers/rootReducer'\nimport { createStore, applyMiddleware, compose } from 'redux'\n\n// ** init middleware\nconst middleware = [thunk, createDebounce()]\n\n// ** Dev Tools\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n// ** Create store\nconst store = createStore(rootReducer, {}, composeEnhancers(applyMiddleware(...middleware)))\n\nexport { store }\n","// ** React Imports\nimport { useEffect, useState, createContext } from 'react'\n\n// ** Create Context\nconst ThemeColors = createContext()\n\nconst ThemeContext = ({ children }) => {\n  // ** State\n  const [colors, setColors] = useState({})\n\n  //** ComponentDidMount\n  useEffect(() => {\n    if (window !== 'undefined') {\n      //** Get variable value\n      const getHex = color => window.getComputedStyle(document.body).getPropertyValue(color).trim()\n\n      //** Colors obj\n      const obj = {\n        primary: {\n          light: getHex('--primary').concat('1a'),\n          main: getHex('--primary')\n        },\n        secondary: {\n          light: getHex('--secondary').concat('1a'),\n          main: getHex('--secondary')\n        },\n        success: {\n          light: getHex('--success').concat('1a'),\n          main: getHex('--success')\n        },\n        danger: {\n          light: getHex('--danger').concat('1a'),\n          main: getHex('--danger')\n        },\n        warning: {\n          light: getHex('--warning').concat('1a'),\n          main: getHex('--warning')\n        },\n        info: {\n          light: getHex('--info').concat('1a'),\n          main: getHex('--info')\n        },\n        dark: {\n          light: getHex('--dark').concat('1a'),\n          main: getHex('--dark')\n        }\n      }\n\n      setColors({ ...obj })\n    }\n  }, [])\n\n  return <ThemeColors.Provider value={{ colors }}>{children}</ThemeColors.Provider>\n}\n\nexport { ThemeColors, ThemeContext }\n","// ** Logo\nimport logo from '@src/assets/images/logo/logo.jpg'\n\nconst SpinnerComponent = () => {\n  return (\n    <div className='fallback-spinner vh-100'>\n\n      <img className='fallback-logo' style={{}}  height='50'\n          width='50' src={logo} alt='logo' />\n      <div className='loading'>\n\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default SpinnerComponent\n","// ** React Imports\nimport { useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport { Button } from 'reactstrap'\nimport classnames from 'classnames'\n\n// ** Styles\nimport './ripple-button.scss'\n\nconst RippleButton = ({ className, children, onClick, ...rest }) => {\n  // ** States\n  const [mounted, setMounted] = useState(false)\n  const [isRippling, setIsRippling] = useState(false)\n  const [coords, setCoords] = useState({ x: -1, y: -1 })\n\n  // ** Toggle mounted on mount & unmount\n  useEffect(() => {\n    setMounted(true)\n    return () => setMounted(false)\n  }, [])\n\n  // ** Check for coords and set ripple\n  useEffect(() => {\n    if (mounted) {\n      if (coords.x !== -1 && coords.y !== -1) {\n        setIsRippling(true)\n        setTimeout(() => setIsRippling(false), 500)\n      } else {\n        setIsRippling(false)\n      }\n    }\n  }, [coords])\n\n  // ** Reset Coords on ripple end\n  useEffect(() => {\n    if (mounted) {\n      if (!isRippling) setCoords({ x: -1, y: -1 })\n    }\n  }, [isRippling])\n\n  return (\n    <Button\n      className={classnames('waves-effect', {\n        [className]: className\n      })}\n      onClick={e => {\n        const rect = e.target.getBoundingClientRect()\n        setCoords({ x: e.clientX - rect.left, y: e.clientY - rect.top })\n        if (onClick) {\n          onClick(e)\n        }\n      }}\n      {...rest}\n    >\n      {children}\n      {isRippling ? (\n        <span\n          className='waves-ripple'\n          style={{\n            left: coords.x,\n            top: coords.y\n          }}\n        ></span>\n      ) : null}\n    </Button>\n  )\n}\n\n// ** PropTypes\nRippleButton.propTypes = {\n  ...Button.propTypes\n}\n\nButton.Ripple = RippleButton\n","/*eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker === null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType !== null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","// ** React Imports\nimport { Suspense, lazy } from 'react'\nimport ReactDOM from 'react-dom'\n\n// ** Redux Imports\nimport { Provider } from 'react-redux'\nimport { store } from './redux/storeConfig/store'\n\n// ** Toast & ThemeColors Context\nimport { ToastContainer } from 'react-toastify'\nimport { ThemeContext } from './utility/context/ThemeColors'\n\n// ** Spinner (Splash Screen)\nimport Spinner from './@core/components/spinner/Fallback-spinner'\n\n// ** Ripple Button\nimport './@core/components/ripple-button'\n\n// ** PrismJS\nimport 'prismjs'\nimport 'prismjs/themes/prism-tomorrow.css'\nimport 'prismjs/components/prism-jsx.min'\n\n// ** React Perfect Scrollbar\nimport 'react-perfect-scrollbar/dist/css/styles.css'\n\n// ** React Toastify\nimport '@styles/react/libs/toastify/toastify.scss'\n\n// ** Core styles\nimport './@core/assets/fonts/feather/iconfont.css'\nimport './@core/scss/core.scss'\nimport './assets/scss/style.scss'\n\n// ** Service Worker\nimport * as serviceWorker from './serviceWorker'\n\n// ** Lazy load app\nconst LazyApp = lazy(() => import('./App'))\n\nReactDOM.render(\n  <Provider store={store}>\n    <Suspense fallback={<Spinner />}>\n      <ThemeContext>\n        <LazyApp />\n        <ToastContainer newestOnTop />\n      </ThemeContext>\n    </Suspense>\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}